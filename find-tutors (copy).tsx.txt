import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation } from "wouter";
import {
  Filter,
  Check,
  ChevronDown,
  ChevronUp,
  BookOpen,
  GraduationCap,
  Clock,
  IndianRupee,
  MapPin,
} from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import SearchForm from "@/components/search-form";
import TutorCard from "@/components/tutor-card";
import { Input } from "@/components/ui/input";

interface FilterSectionProps {
  title: string;
  children: React.ReactNode;
  defaultOpen?: boolean;
  icon?: React.ReactNode; // Add icon prop to fix the LSP issue
}

const FilterSection = ({
  title,
  children,
  defaultOpen = true,
  icon,
}: FilterSectionProps) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <div className="mb-4">
      <button
        className="flex justify-between items-center w-full py-2 text-left font-semibold"
        onClick={() => setIsOpen(!isOpen)}
      >
        <span className="flex items-center">
          {icon && <span className="mr-2">{icon}</span>}
          {title}
        </span>
        {isOpen ? (
          <ChevronUp className="h-4 w-4" />
        ) : (
          <ChevronDown className="h-4 w-4" />
        )}
      </button>
      {isOpen && <div className="mt-2 space-y-2">{children}</div>}
      <Separator className="mt-2" />
    </div>
  );
};

const FindTutors = () => {
  const [location] = useLocation();
  const searchParams = new URLSearchParams(location.split("?")[1] || "");

  const [subjectFilter, setSubjectFilter] = useState<string>(
    searchParams.get("subject") || "",
  );
  const [locationFilter, setLocationFilter] = useState<string>(
    searchParams.get("location") || "",
  );
  const [experienceFilter, setExperienceFilter] = useState<string[]>([]);
  const [priceRangeFilter, setPriceRangeFilter] = useState<string[]>([]);
  const [isMobileFiltersOpen, setIsMobileFiltersOpen] = useState(false);

  // Fetch tutors with filters
  const { data: tutors, isLoading } = useQuery({
    queryKey: ["/api/tutors/search", subjectFilter, locationFilter],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (subjectFilter) params.append("subject", subjectFilter);
      if (locationFilter) params.append("location", locationFilter);

      const response = await fetch(`/api/tutors/search?${params.toString()}`);
      if (!response.ok) throw new Error("Failed to fetch tutors");
      return response.json();
    },
  });

  // Get subjects list
  const { data: subjectsList } = useQuery({
    queryKey: ["/api/subjects/list"],
  });

  // Filter tutors based on selected filters
  const filteredTutors = tutors?.filter((tutor: any) => {
    // Experience filter
    if (experienceFilter.length > 0) {
      if (experienceFilter.includes("0-2") && tutor.yearsExperience > 2)
        return false;
      if (
        experienceFilter.includes("3-5") &&
        (tutor.yearsExperience < 3 || tutor.yearsExperience > 5)
      )
        return false;
      if (
        experienceFilter.includes("6-10") &&
        (tutor.yearsExperience < 6 || tutor.yearsExperience > 10)
      )
        return false;
      if (experienceFilter.includes("10+") && tutor.yearsExperience <= 10)
        return false;
    }

    // Price range filter
    if (priceRangeFilter.length > 0) {
      // Calculate monthly rate in rupees
      const monthlyRate = Math.round(tutor.hourlyRate * 20 * 80); // assuming 20 hrs/month and 1 USD = 80 INR

      if (priceRangeFilter.includes("0-1000") && monthlyRate > 1000)
        return false;
      if (
        priceRangeFilter.includes("1000-2500") &&
        (monthlyRate < 1000 || monthlyRate > 2500)
      )
        return false;
      if (
        priceRangeFilter.includes("2500-5000") &&
        (monthlyRate < 2500 || monthlyRate > 5000)
      )
        return false;
      if (priceRangeFilter.includes("5000+") && monthlyRate < 5000)
        return false;
    }

    return true;
  });

  // Toggle experience filter
  const toggleExperienceFilter = (value: string) => {
    setExperienceFilter((prev) =>
      prev.includes(value)
        ? prev.filter((item) => item !== value)
        : [...prev, value],
    );
  };

  // Toggle price range filter
  const togglePriceRangeFilter = (value: string) => {
    setPriceRangeFilter((prev) =>
      prev.includes(value)
        ? prev.filter((item) => item !== value)
        : [...prev, value],
    );
  };

  // Update filters from search params when location changes
  useEffect(() => {
    const params = new URLSearchParams(location.split("?")[1] || "");
    const subjectParam = params.get("subject");
    const locationParam = params.get("location");

    if (subjectParam !== null) setSubjectFilter(subjectParam);
    if (locationParam !== null) setLocationFilter(locationParam);
  }, [location]);

  // Clear all filters
  const clearFilters = () => {
    setSubjectFilter("");
    setLocationFilter("");
    setExperienceFilter([]);
    setPriceRangeFilter([]);
  };

  return (
    <div className="bg-background min-h-screen">
      <section className="bg-primary py-12">
        <div className="container mx-auto px-6">
          <h1 className="text-2xl md:text-3xl font-bold text-white mb-6">
            Find the Perfect Tutor
          </h1>
          <SearchForm compact className="bg-white/95 backdrop-blur-sm" />
        </div>
      </section>

      <section className="container mx-auto px-6 py-8">
        <div className="flex flex-col md:flex-row gap-8">
          {/* Mobile filter button */}
          <div className="md:hidden mb-4">
            <Button
              variant="outline"
              className="w-full"
              onClick={() => setIsMobileFiltersOpen(!isMobileFiltersOpen)}
            >
              <Filter className="h-4 w-4 mr-2" />
              {isMobileFiltersOpen ? "Hide Filters" : "Show Filters"}
            </Button>
          </div>

          {/* Filters sidebar */}
          <div
            className={`${isMobileFiltersOpen ? "block" : "hidden"} md:block md:w-1/4`}
          >
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold flex items-center">
                    <Filter className="h-4 w-4 mr-2" /> Filters
                  </h2>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={clearFilters}
                    className="text-sm text-primary hover:text-primary-foreground"
                  >
                    Clear All
                  </Button>
                </div>

                {/* Subject filter */}
                <FilterSection title="Subject" defaultOpen={!!subjectFilter}>
                  <div className="space-y-2">
                    {subjectsList?.slice(0, 8).map((subject: string) => (
                      <div key={subject} className="flex items-center">
                        <Checkbox
                          id={`subject-${subject}`}
                          checked={subjectFilter === subject}
                          onCheckedChange={() =>
                            setSubjectFilter(
                              subjectFilter === subject ? "" : subject,
                            )
                          }
                        />
                        <label
                          htmlFor={`subject-${subject}`}
                          className="ml-2 text-sm font-medium cursor-pointer"
                        >
                          {subject}
                        </label>
                      </div>
                    ))}
                    {subjectsList && subjectsList.length > 8 && (
                      <Button
                        variant="link"
                        className="text-primary p-0 h-auto"
                      >
                        Show more subjects
                      </Button>
                    )}
                  </div>
                </FilterSection>

                {/* Location filter */}
                <FilterSection title="Location" defaultOpen={!!locationFilter}>
                  <div className="flex items-center space-x-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="Enter ZIP or City"
                      value={locationFilter}
                      onChange={(e) => setLocationFilter(e.target.value)}
                      className="h-9"
                    />
                  </div>
                  {locationFilter && (
                    <div className="mt-2">
                      <Badge
                        variant="outline"
                        className="flex items-center gap-1"
                      >
                        {locationFilter}
                        <button
                          onClick={() => setLocationFilter("")}
                          className="ml-1 hover:text-destructive"
                        >
                          &times;
                        </button>
                      </Badge>
                    </div>
                  )}
                </FilterSection>

                {/* Experience filter */}
                <FilterSection
                  title="Experience"
                  icon={<GraduationCap className="h-4 w-4" />}
                >
                  <div className="space-y-2">
                    {[
                      { value: "0-2", label: "0-2 years" },
                      { value: "3-5", label: "3-5 years" },
                      { value: "6-10", label: "6-10 years" },
                      { value: "10+", label: "10+ years" },
                    ].map((option) => (
                      <div key={option.value} className="flex items-center">
                        <Checkbox
                          id={`exp-${option.value}`}
                          checked={experienceFilter.includes(option.value)}
                          onCheckedChange={() =>
                            toggleExperienceFilter(option.value)
                          }
                        />
                        <label
                          htmlFor={`exp-${option.value}`}
                          className="ml-2 text-sm font-medium cursor-pointer"
                        >
                          {option.label}
                        </label>
                      </div>
                    ))}
                  </div>
                </FilterSection>

                {/* Price range filter */}
                <FilterSection
                  title="Price Range"
                  icon={<IndianRupee className="h-4 w-4" />}
                >
                  <div className="space-y-2">
                    {[
                      { value: "0-1000", label: "Under ₹1,000/month" },
                      { value: "1000-2500", label: "₹1,000-₹2,500/month" },
                      { value: "2500-5000", label: "₹2,500-₹5,000/month" },
                      { value: "5000+", label: "₹5,000+/month" },
                    ].map((option) => (
                      <div key={option.value} className="flex items-center">
                        <Checkbox
                          id={`price-${option.value}`}
                          checked={priceRangeFilter.includes(option.value)}
                          onCheckedChange={() =>
                            togglePriceRangeFilter(option.value)
                          }
                        />
                        <label
                          htmlFor={`price-${option.value}`}
                          className="ml-2 text-sm font-medium cursor-pointer"
                        >
                          {option.label}
                        </label>
                      </div>
                    ))}
                  </div>
                </FilterSection>

                {/* Apply filters button (mobile only) */}
                <div className="mt-4 md:hidden">
                  <Button
                    className="w-full"
                    onClick={() => setIsMobileFiltersOpen(false)}
                  >
                    Apply Filters
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Tutors grid */}
          <div className="md:w-3/4">
            {/* Current filters */}
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">
                {filteredTutors
                  ? `${filteredTutors.length} Tutors Found`
                  : "Searching for tutors..."}
              </h2>
              <div className="flex flex-wrap gap-2">
                {subjectFilter && (
                  <Badge variant="outline" className="flex items-center gap-1">
                    <BookOpen className="h-3 w-3 mr-1" />
                    Subject: {subjectFilter}
                    <button
                      onClick={() => setSubjectFilter("")}
                      className="ml-1 hover:text-destructive"
                    >
                      &times;
                    </button>
                  </Badge>
                )}
                {locationFilter && (
                  <Badge variant="outline" className="flex items-center gap-1">
                    <MapPin className="h-3 w-3 mr-1" />
                    Location: {locationFilter}
                    <button
                      onClick={() => setLocationFilter("")}
                      className="ml-1 hover:text-destructive"
                    >
                      &times;
                    </button>
                  </Badge>
                )}
                {experienceFilter.length > 0 && (
                  <Badge variant="outline" className="flex items-center gap-1">
                    <GraduationCap className="h-3 w-3 mr-1" />
                    Experience: {experienceFilter.join(", ")}
                    <button
                      onClick={() => setExperienceFilter([])}
                      className="ml-1 hover:text-destructive"
                    >
                      &times;
                    </button>
                  </Badge>
                )}
                {priceRangeFilter.length > 0 && (
                  <Badge variant="outline" className="flex items-center gap-1">
                    <IndianRupee className="h-3 w-3 mr-1" />
                    Price: {priceRangeFilter.join(", ")}
                    <button
                      onClick={() => setPriceRangeFilter([])}
                      className="ml-1 hover:text-destructive"
                    >
                      &times;
                    </button>
                  </Badge>
                )}
              </div>
            </div>

            {/* Results */}
            {isLoading ? (
              <div className="text-center py-12">Loading tutors...</div>
            ) : filteredTutors?.length === 0 ? (
              <Card className="p-12 text-center">
                <h3 className="text-xl font-semibold mb-2">No tutors found</h3>
                <p className="text-gray-600 mb-4">
                  Try adjusting your filters or search criteria to find
                  available tutors.
                </p>
                <Button onClick={clearFilters}>Clear All Filters</Button>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {Array.isArray(filteredTutors) &&
                  filteredTutors.map((tutor: any) => {
                    // Handle the case where user is null by providing default values
                    const firstName =
                      tutor.user?.firstName || tutor.firstName || "Tutor";
                    const lastName =
                      tutor.user?.lastName || tutor.lastName || `${tutor.id}`;

                    // Convert hourly rate to monthly rate in rupees (approximation)
                    const monthlyRate = Math.round(tutor.hourlyRate * 20 * 80); // Assuming 20 hours/month and 1 USD = 80 INR

                    return (
                      <TutorCard
                        key={tutor.id}
                        id={tutor.id}
                        profilePicture={
                          tutor.user?.profilePicture ||
                          "https://via.placeholder.com/400x300?text=No+Profile"
                        }
                        firstName={firstName}
                        lastName={lastName}
                        headline={tutor.headline || ""}
                        bio={tutor.bio || ""}
                        subjects={tutor.subjects || []}
                        hourlyRate={monthlyRate}
                        rating={tutor.rating || 0}
                        isTopRated={tutor.isTopRated}
                        isNew={tutor.isNew}
                      />
                    );
                  })}
              </div>
            )}
          </div>
        </div>
      </section>
    </div>
  );
};

export default FindTutors;
